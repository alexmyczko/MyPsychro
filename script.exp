#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Aug  5 23:21:15 2015
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./mypsychro
match_max 100000
expect -exact "\r
-------------------------------------------------------------\r
|     ..oOO| INTERACTIVE PSYCHROMETRIC CALCULATOR |OOo..     |\r
|                                                            |\r
| Functions from 2005 ASHRAE Handbook of Fundamentals        |\r
| Library provided by Numerical Logics Inc., www.numlog.ca   |\r
| Application developed by Martin Michel, 2009, 2015         |\r
-------------------------------------------------------------\r
\r
Enter the Dry Air Temperature \[degC\]: "
send -- "22.9\r"
expect -exact "22.9\r
Now choose your further available air properties: \r
 (1) set Pressure and Wet Bulb Temperature\r
 (2) set Pressure and Dew Point Temperature\r
 (3) set Pressure and Relative Humidity\r
\r
"
send -- "3\r"
expect -exact "3\r
\r
Enter the Air Pressure \[bar(a)\]: "
send -- "1.002\r"
expect -exact "1.002\r
Enter the Relative Humidity: "
send -- "0.23\r"
expect -exact "0.23\r
\r
 Your Set of Air Properties is: \r
..............................................................\r
 Dry Bulb Temperature \[degC\]        22.90\r
 Wet Bulb Temperature \[degC\]        11.64\r
 Dew Point Temperature \[degC\]       0.67\r
 Relative Humidity \[%\]              23.00\r
 Humiditiy Ration \[gH2O/kgAir\]      4.01\r
 Specific Volume \[m3/kg\]            0.854\r
 Degree of Saturation \[-\]           0.225\r
 Enthalpy \[kJ/kg\]                   33.2 \r
 Vapour Pressure \[Pa\]               642   \r
 Air Pressure \[Pa\]                  100200\r
\r
Press enter to terminate this console application ... "
send -- "\r"
expect eof
